import requests
import pandas as pd
import os
import logging

# --- Logging be√°ll√≠t√°sok ---
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# --- K√∂rnyezeti v√°ltoz√≥k ---
TOKEN = os.getenv("TG_API_KEY")
CHAT_ID = os.getenv("TG_CHAT_ID")
GATE_API_KEY = os.getenv("GATEI_KEY")
GATE_SECRET_KEY = os.getenv("GATEI_SECRET")


# --- Telegram √ºzenet k√ºld√©se ---
def send_telegram_message(message):
    if not TOKEN or not CHAT_ID:
        logging.warning("Hi√°nyz√≥ Telegram be√°ll√≠t√°sok (TG_API_KEY vagy TG_CHAT_ID)!")
        return
    url = f"https://api.telegram.org/bot{TOKEN}/sendMessage"
    data = {"chat_id": CHAT_ID, "text": message, "parse_mode": "Markdown"} # Hozz√°adtam a parse_mode-ot a jobb form√°z√°s√©rt
    try:
        r = requests.post(url, data=data)
        r.raise_for_status() # Hiba eset√©n kiv√©telt dob
        logging.info("Telegram √ºzenet sikeresen elk√ºldve.")
    except requests.exceptions.HTTPError as http_err:
        logging.error(f"Telegram HTTP hiba: {http_err} - V√°lasz: {r.text}")
    except Exception as e:
        logging.error(f"Telegram hiba: {e}")

# --- Coinp√°rok ---
PAIRS = ["PI_USDT", "SOL_USDT", "XRP_USDT", "PEPE_USDT", "TRUMP_USDT"]

# --- √údv√∂zl≈ë √ºzenet ---
# Ellen≈ërizz√ºk, hogy a kulcsok l√©teznek-e, miel≈ëtt b√°rmilyen API h√≠v√°st ind√≠tan√°nk
if GATE_API_KEY and GATE_SECRET_KEY:
    send_telegram_message("ü§ñ A t√∂bb coin figyel≈ë bot elindult!")
else:
    error_message = "A bot nem tud elindulni a hi√°nyz√≥ Gate.io API kulcsok miatt (GATEIO_KEY vagy GATEIO_SECRET). K√©rlek, √°ll√≠tsd be ≈ëket."
    logging.critical(error_message)
    send_telegram_message(error_message) # √ârtes√≠t√©s Telegramon is, ha lehet
    # Fontos lehet itt le√°ll√≠tani a script fut√°s√°t, ha a kulcsok n√©lk√ºl nem tud m≈±k√∂dni.
    # exit() vagy raise SystemExit(error_message)

# --- Adatok lek√©r√©se ---
def fetch_data(pair):
    if not GATE_API_KEY or not GATE_SECRET_KEY:
        logging.error(f"{pair} lek√©r√©s hiba: Hi√°nyz√≥ Gate.io API kulcsok.")
        return None

    url = f"https://api.gateio.ws/api/v4/spot/candlesticks?currency_pair={pair}&limit=30&interval=1h"
    # Fontos: A Gate.io API v4 nem haszn√°lja a KEY √©s SECRET headereket √≠gy k√∂zvetlen√ºl a GET k√©r√©sekn√©l.
    # A hiteles√≠t√©s √°ltal√°ban al√°√≠r√°ssal t√∂rt√©nik, ami bonyolultabb.
    # Ha ez egy publikus v√©gpont, akkor nincs sz√ºks√©g header-re.
    # Ha priv√°t, akkor az al√°√≠r√°si mechanizmust kell implement√°lni.
    # Jelenleg felt√©telezem, hogy ez a v√©gpont nem ig√©nyel hiteles√≠t√©st, vagy a hiba m√°shol volt.
    # Ha m√©gis kell hiteles√≠t√©s, a requests library nem fogja automatikusan kezelni a 'KEY', 'SECRET' headereket.
    # A hiba√ºzenet ("Invalid leading whitespace...") a header *√©rt√©k√©re* vonatkozott, nem a header nev√©re.
    # Teh√°t a tiszt√≠t√°s tov√°bbra is relev√°ns, ha ezeket a kulcsokat m√°shol haszn√°lod hiteles√≠t√©sre.
    
    # Mivel a hiba a header √©rt√©k√©ben volt, √©s a Gate.io API kulcsok ker√ºltek bele,
    # a jav√≠t√°s azokra f√≥kusz√°l. Ha ez a specifikus v√©gpont nem is haszn√°lja ≈ëket headerben,
    # a kulcsok tiszt√≠t√°sa akkor is helyes gyakorlat.
    headers = {
        "Accept": "application/json", # Aj√°nlott header
        # "KEY": GATE_API_KEY, # Ezt a Gate.io v4 GET k√©r√©sek √°ltal√°ban nem √≠gy haszn√°lj√°k
        # "SECRET": GATE_SECRET_KEY # Ezt sem
    }
    try:
        logging.info(f"Adatok lek√©r√©se a k√∂vetkez≈ëh√∂z: {pair}")
        r = requests.get(url, headers=headers, timeout=10) # Timeout hozz√°adva
        r.raise_for_status() # HTTP hib√°k elfog√°sa
        data = r.json()
        if not isinstance(data, list) or not all(isinstance(item, list) for item in data):
            logging.error(f"{pair} lek√©r√©s hiba: V√°ratlan adatstrukt√∫ra a Gate.io-t√≥l: {data}")
            return None

        columns = ["timestamp", "volume", "close", "high", "low", "open", "currency_volume"] # Gate.io v4 sorrend: t,v,c,h,l,o + currency_volume
        df = pd.DataFrame(data, columns=columns)
        df["timestamp"] = pd.to_numeric(df["timestamp"])
        df["timestamp"] = pd.to_datetime(df["timestamp"], unit="s")
        # Biztos√≠tjuk, hogy a megfelel≈ë oszlopok legyenek numerikusak
        numeric_cols = ["open", "high", "low", "close", "volume", "currency_volume"]
        for col in numeric_cols:
            df[col] = pd.to_numeric(df[col], errors='coerce') # errors='coerce' a hib√°s √©rt√©keket NaN-ra cser√©li

        df = df.sort_values("timestamp").reset_index(drop=True)
        logging.info(f"Adatok sikeresen feldolgozva: {pair}, sorok sz√°ma: {len(df)}")
        return df
    except requests.exceptions.HTTPError as http_err:
        logging.error(f"{pair} lek√©r√©s HTTP hiba: {http_err} - URL: {url} - V√°lasz: {r.text if 'r' in locals() else 'N/A'}")
        return None
    except requests.exceptions.Timeout:
        logging.error(f"{pair} lek√©r√©s id≈ët√∫ll√©p√©s: {url}")
        return None
    except requests.exceptions.RequestException as req_err:
        logging.error(f"{pair} lek√©r√©s h√°l√≥zati hiba: {req_err} - URL: {url}")
        return None
    except ValueError as json_err: # JSON dek√≥dol√°si hiba
        logging.error(f"{pair} lek√©r√©s JSON dek√≥dol√°si hiba: {json_err} - V√°lasz: {r.text if 'r' in locals() else 'N/A'}")
        return None
    except Exception as e:
        logging.error(f"{pair} lek√©r√©s √°ltal√°nos hiba: {e}")
        return None

# --- RSI sz√°m√≠t√°sa ---
def calculate_rsi(series, period=14):
    if not isinstance(series, pd.Series) or series.empty:
        return pd.Series(dtype=float) # √úres Series-t ad vissza, ha a bemenet √©rv√©nytelen
    delta = series.diff()
    gain = delta.where(delta > 0, 0.0).rolling(window=period, min_periods=1).mean() # min_periods=1 hozz√°adva
    loss = -delta.where(delta < 0, 0.0).rolling(window=period, min_periods=1).mean() # min_periods=1 hozz√°adva
    
    # Ker√ºlj√ºk a null√°val val√≥ oszt√°st
    rs = gain / loss
    rs = rs.replace([float('inf'), -float('inf')], float('nan')) # V√©gtelen √©rt√©kek cser√©je NaN-ra

    rsi = 100 - (100 / (1 + rs))
    return rsi

# --- Score sz√°m√≠t√°s ---
def calculate_score(df):
    score = 0
    # Ellen≈ërizz√ºk, hogy van-e el√©g adat a sz√°m√≠t√°sokhoz
    if len(df) < 2: # Legal√°bb 2 adatpont kell az iloc[-2] m≈±k√∂d√©s√©hez
        logging.warning("Nem elegend≈ë adat a score sz√°m√≠t√°shoz.")
        return 0

    # üöÄ EMA trend meger≈ës√≠t√©s
    if df["EMA12"].iloc[-1] > df["EMA26"].iloc[-1] and df["EMA26"].iloc[-1] > df["EMA26"].iloc[-2]:
        score += 1

    # üöÄ MACD keresztvizsg√°lat
    if df["MACD"].iloc[-1] > df["Signal"].iloc[-1] and df["MACD"].iloc[-2] < df["Signal"].iloc[-2]:
        score += 1

    # üöÄ RSI sz≈±r√©s
    if df["RSI"].iloc[-1] > 60:
        score += 1

    # üöÄ EMA50 t√°vols√°gsz≈±r√©s
    current_price = df["close"].iloc[-1]
    ema50 = df["EMA50"].iloc[-1]
    if ema50 != 0: # Null√°val val√≥ oszt√°s elker√ºl√©se
        distance_pct = abs((current_price - ema50) / ema50) * 100
        if current_price > ema50 and 2 <= distance_pct <= 3:
            score += 1
    else:
        logging.warning("EMA50 √©rt√©ke nulla, a t√°vols√°gsz≈±r√©s kihagyva.")


    # üöÄ Volumen meger≈ës√≠t√©s
    # Biztos√≠tjuk, hogy van el√©g adat az √°tlaghoz (-6:-1 szeletel√©shez legal√°bb 6 elem kell)
    if len(df) >= 6:
        inflow = (df["close"].iloc[-1] - df["open"].iloc[-1]) * df["volume"].iloc[-1]
        avg_inflow = ((df["close"] - df["open"]) * df["volume"]).iloc[-6:-1].mean()
        if pd.notna(avg_inflow) and inflow > avg_inflow: # Ellen≈ërizz√ºk, hogy avg_inflow ne legyen NaN
            score += 1
    else:
        logging.warning("Nem elegend≈ë adat a volumen meger≈ës√≠t√©shez (√°tlaghoz).")

    return round(score, 2)

# --- Coinok √©rt√©kel√©se ---
report = []
# Csak akkor fusson a ciklus, ha az API kulcsok rendben vannak
if GATE_API_KEY and GATE_SECRET_KEY:
    for pair in PAIRS:
        logging.info(f"Feldolgoz√°s indul: {pair}")
        df = fetch_data(pair)
        if df is not None and not df.empty and len(df) >= 50: # N√∂veltem a minimum adatsz√°mot az EMA50 miatt
            try:
                df["EMA12"] = df["close"].ewm(span=12, adjust=False, min_periods=12).mean()
                df["EMA26"] = df["close"].ewm(span=26, adjust=False, min_periods=26).mean()
                df["EMA50"] = df["close"].ewm(span=50, adjust=False, min_periods=50).mean()
                
                # MACD sz√°m√≠t√°s csak ha az EMA-k l√©teznek
                if "EMA12" in df.columns and "EMA26" in df.columns:
                    df["MACD"] = df["EMA12"] - df["EMA26"]
                    df["Signal"] = df["MACD"].ewm(span=9, adjust=False, min_periods=9).mean()
                else:
                    logging.warning(f"EMA12 vagy EMA26 hi√°nyzik {pair}-hez, MACD kihagyva.")
                    continue # Kihagyja a score sz√°m√≠t√°st, ha nincs MACD

                df["RSI"] = calculate_rsi(df["close"])

                # Csak akkor sz√°molunk score-t, ha minden sz√ºks√©ges oszlop l√©tezik √©s nem csak NaN √©rt√©keket tartalmaznak
                required_cols_for_score = ["EMA12", "EMA26", "EMA50", "MACD", "Signal", "RSI", "close", "open", "volume"]
                if all(col in df.columns for col in required_cols_for_score) and not df[required_cols_for_score].iloc[-1].isnull().any():
                    s = calculate_score(df.tail(50)) # Csak az utols√≥ 50 adatpontot haszn√°ljuk a score-hoz, ha az indik√°torok is ezek alapj√°n sz√°mol√≥dnak
                    if s >= 3.5:
                        report.append((pair, s))
                        logging.info(f"Er≈ës jelz√©s tal√°lva: {pair}, Score: {s}")
                else:
                    logging.warning(f"Nem minden sz√ºks√©ges oszlop √°ll rendelkez√©sre vagy NaN √©rt√©keket tartalmaznak a score sz√°m√≠t√°shoz {pair}-n√©l az utols√≥ sorban.")

            except Exception as e:
                logging.error(f"Hiba {pair} indik√°torainak sz√°m√≠t√°sa vagy score √©rt√©kel√©se k√∂zben: {e}")
        elif df is None or df.empty:
            logging.warning(f"Nincs adat, vagy √ºres DataFrame √©rkezett {pair}-hez. Kihagyva.")
        else:
            logging.warning(f"Nem elegend≈ë adat ({len(df)} sor) {pair}-hez a megb√≠zhat√≥ indik√°tor sz√°m√≠t√°shoz (min 50 sz√ºks√©ges). Kihagyva.")


# --- Jelent√©s ---
if report:
    ranked = sorted(report, key=lambda x: x[1], reverse=True)
    message = "üìà *Bullish score alapj√°n er≈ës coinok:*\n\n" # Extra sort√∂r√©s a jobb olvashat√≥s√°g√©rt
    for pair, sc in ranked:
        message += f"‚Ä¢ `{pair}` ‚Äî score: *{sc}*\n"
    send_telegram_message(message)
    logging.info("Jelent√©s elk√ºldve Telegramra.")
else:
    # K√ºldj√ºnk √ºzenetet akkor is, ha nincs er≈ës jelz√©s, de a bot futott
    if GATE_API_KEY and GATE_SECRET_KEY: # Csak ha a botnak volt es√©lye futni
        send_telegram_message("‚ÑπÔ∏è A bot lefutott, de nem tal√°lt er≈ës bullish jelz√©st a figyelt coinok k√∂z√∂tt.")
        logging.info("Nincs er≈ës jelz√©s, err≈ël √ºzenet k√ºldve.")

